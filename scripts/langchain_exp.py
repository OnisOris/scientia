# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
# pip install langgraph langchain-openai langchain-experimental python-dotenv

import operator
import os
from typing import Annotated, Sequence, TypedDict

from dotenv import load_dotenv
from langchain_core.messages import BaseMessage, HumanMessage

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –ò–º–ø–æ—Ä—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ LangChain
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
from langchain_experimental.tools.python.tool import PythonREPLTool
from langchain_openai import ChatOpenAI
from langgraph.graph import END, StateGraph
from langgraph.prebuilt import ToolNode


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
class AgentState(TypedDict):
    messages: Annotated[Sequence[BaseMessage], operator.add]
    input: str
    agent_scratchpad: Annotated[Sequence[BaseMessage], operator.add]
    next: str


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM
llm = ChatOpenAI(temperature=0, model="gpt-3.5-turbo", api_key=OPENAI_API_KEY)

# –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
tools = [PythonREPLTool()]

# –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–≥–µ–Ω—Ç–∞
prompt = ChatPromptTemplate.from_messages(
    [
        (
            "system",
            "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç Python. –ò—Å–ø–æ–ª—å–∑—É–π Python REPL –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞.",
        ),
        MessagesPlaceholder(variable_name="messages"),
        ("user", "–¢–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞: {input}"),
        MessagesPlaceholder(variable_name="agent_scratchpad"),
    ]
)

# –°–æ–∑–¥–∞–µ–º LLM-–∞–≥–µ–Ω—Ç —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω–≤–µ–π–µ—Ä
agent = prompt | llm.bind_tools(tools)


# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –¥–ª—è –≥—Ä–∞—Ñ–∞
def should_continue(state: AgentState) -> str:
    messages = state["messages"]
    last_message = messages[-1]
    # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–∑–æ–≤—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤, –∑–∞–ø—É—Å–∫–∞–µ–º ToolNode
    if hasattr(last_message, "tool_calls") and last_message.tool_calls:
        return "action"
    return "end"


# –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ
workflow = StateGraph(AgentState)
workflow.add_node("agent", agent)
workflow.add_node("action", ToolNode(tools))
workflow.set_entry_point("agent")
workflow.add_conditional_edges(
    "agent", should_continue, {"action": "action", "end": END}
)
workflow.add_edge("action", "agent")
app = workflow.compile()


# –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞ —Å —Å–∞–º–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏–µ–π
def run_agent_with_retry(question: str, max_attempts: int = 3):
    for attempt in range(max_attempts):
        try:
            # –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è, –≤–∫–ª—é—á–∞—è input
            response = app.invoke(
                {
                    "messages": [HumanMessage(content=question)],
                    "input": question,
                    "agent_scratchpad": [],
                }
            )
            # –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
            output = response["messages"][-1].content
            print(f"\n--- –†–µ–∑—É–ª—å—Ç–∞—Ç (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}) ---\n{output}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if (
                any(val in output for val in ["120", "3628800"])
                or "—Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª" in output.lower()
            ):
                print("\n‚úÖ –ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ –∏ –ø—Ä–æ—à–µ–ª —Ç–µ—Å—Ç")
                return output
            else:
                raise ValueError("–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è")
        except Exception as e:
            print(f"\n‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
            if attempt < max_attempts - 1:
                print("üîÑ –ê–≥–µ–Ω—Ç –ø—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É...")
                question = f"–ò—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫—É –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –∫–æ–¥–µ: {e}"
            else:
                print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫")
                raise


# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    question = "–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ Python, –∫–æ—Ç–æ—Ä–∞—è –≤—ã—á–∏—Å–ª—è–µ—Ç —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞ n –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π –µ—ë –¥–ª—è n=5."
    run_agent_with_retry(question)
