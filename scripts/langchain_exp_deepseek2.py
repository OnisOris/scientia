import operator
import os
import time
from typing import Annotated, Sequence, TypedDict

from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API-–∫–ª—é—á–∞
if not DEEPSEEK_API_KEY:
    print("‚ùå DEEPSEEK_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
    print("üîë –ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –Ω–∞ https://platform.deepseek.com/api-keys")
    exit(1)

# –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ LangGraph
from langchain_core.messages import BaseMessage, HumanMessage
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.runnables import RunnablePassthrough
from langchain_experimental.tools.python.tool import PythonREPLTool
from langchain_openai import ChatOpenAI
from langgraph.graph import END, StateGraph

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DeepSeek —á–µ—Ä–µ–∑ OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
llm = ChatOpenAI(
    api_key=DEEPSEEK_API_KEY,
    base_url="https://api.deepseek.com/v1",
    model="deepseek-coder",
    temperature=0,
)

# –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è Python-–∫–æ–¥–∞
python_tool = PythonREPLTool()
tools = [python_tool]


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
class AgentState(TypedDict):
    input: str
    messages: Annotated[Sequence[BaseMessage], operator.add]


# –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç —Å —á–µ—Ç–∫–∏–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
prompt = ChatPromptTemplate.from_messages(
    [
        (
            "system",
            (
                "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç Python. –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –∫–æ–¥–æ–º –Ω–∞ Python.\n"
                "–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: ```python\n<–∫–æ–¥>\n```\n"
                "–ü–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ –æ–Ω –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω."
            ),
        ),
        ("user", "{input}"),
    ]
)

# –°–æ–∑–¥–∞–µ–º —Ü–µ–ø–æ—á–∫—É –¥–ª—è –∞–≥–µ–Ω—Ç–∞
agent_chain = (
    RunnablePassthrough.assign(input=lambda x: x["input"]) | prompt | llm
)


# –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —É–∑–ª–∞ –∞–≥–µ–Ω—Ç–∞
def run_agent_node(state: AgentState):
    result = agent_chain.invoke(state)
    return {"messages": [result]}


# –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —É–∑–ª–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
def run_tool_node(state: AgentState):
    last_message = state["messages"][-1]
    code = extract_python_code(last_message.content)

    if not code:
        return {
            "messages": [
                HumanMessage(
                    content="–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ```python"
                )
            ]
        }

    try:
        result = python_tool.run(code)
        return {"messages": [HumanMessage(content=result)]}
    except Exception as e:
        return {
            "messages": [HumanMessage(content=f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}")]
        }


# –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ
workflow = StateGraph(AgentState)

# –î–æ–±–∞–≤–ª—è–µ–º —É–∑–ª—ã
workflow.add_node("agent", run_agent_node)
workflow.add_node("tool", run_tool_node)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑–∏
workflow.set_entry_point("agent")
workflow.add_edge("agent", "tool")
workflow.add_edge("tool", END)

# –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –≥—Ä–∞—Ñ
app = workflow.compile()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è Python-–∫–æ–¥–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
def extract_python_code(text: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç Python-–∫–æ–¥ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞"""
    if not text:
        return ""

    if "```python" in text:
        start = text.find("```python") + 9
        end = text.find("```", start)
        return text[start:end].strip()

    if "```" in text:
        start = text.find("```") + 3
        end = text.find("```", start)
        return text[start:end].strip()

    return text


# –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞
def run_agent_with_retry(question: str, max_attempts: int = 3):
    for attempt in range(1, max_attempts + 1):
        print(f"\n=== –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts} ===")
        print(f"–ó–∞–ø—Ä–æ—Å: {question}")

        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            state = {
                "input": question,
                "messages": [
                    HumanMessage(
                        content=question
                        + "\n\n–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: –¢–û–õ–¨–ö–û Python-–∫–æ–¥ –≤ –±–ª–æ–∫–µ ```python\n<–∫–æ–¥>\n```"
                    )
                ],
            }

            # –í—ã–ø–æ–ª–Ω—è–µ–º –≥—Ä–∞—Ñ
            start_time = time.time()
            response = app.invoke(state)
            elapsed = time.time() - start_time

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            output = ""
            for msg in response["messages"]:
                if hasattr(msg, "content"):
                    output += f"{msg.content}\n"

            print(f"\n–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed:.2f} —Å–µ–∫")
            print("\n=== –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ===")
            print(output)

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥
            code = extract_python_code(output)
            if code:
                print("\n=== –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ ===")
                print(code)
            else:
                print("\n[INFO] –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤—ã–≤–æ–¥–µ –∞–≥–µ–Ω—Ç–∞")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if "120" in output:
                print("\n‚úÖ –ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ –∏ –ø—Ä–æ—à–µ–ª —Ç–µ—Å—Ç")
                return output
            else:
                raise ValueError(
                    "–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è '120'"
                )

        except Exception as e:
            print(f"\n‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
            if attempt < max_attempts:
                print("üîÑ –ü–æ–ø—ã—Ç–∫–∞ —Å–∞–º–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏–∏...")
                question = f"–ò—Å–ø—Ä–∞–≤—å –∫–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—à–∏–±–∫–∏: {str(e)}"
            else:
                print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å–ª–µ —Ç—Ä–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
                return None


# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    # –ß–µ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å
    question = "–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ Python, –∫–æ—Ç–æ—Ä–∞—è –≤—ã—á–∏—Å–ª—è–µ—Ç —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞ n –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π –µ—ë –¥–ª—è n=5."

    result = run_agent_with_retry(question)

    if result:
        print("\n" + "=" * 50)
        print("–§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
        print(result)
    else:
        print("\n–ó–∞–¥–∞—á–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫")
