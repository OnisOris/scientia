import os
import time
from dotenv import load_dotenv
from langchain.agents import AgentType, initialize_agent
from langchain_experimental.tools.python.tool import PythonREPLTool
from langchain_openai import ChatOpenAI
from langchain_core.agents import AgentFinish
import json

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API-–∫–ª—é—á–∞
if not DEEPSEEK_API_KEY:
    print("‚ùå DEEPSEEK_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
    print("üîë –ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –Ω–∞ https://platform.deepseek.com/api-keys")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DeepSeek
llm = ChatOpenAI(
    api_key=DEEPSEEK_API_KEY,
    base_url="https://api.deepseek.com/v1",
    model="deepseek-coder",
    temperature=0,
)

# –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è Python-–∫–æ–¥–∞
python_tool = PythonREPLTool()
tools = [python_tool]


# –ö–∞—Å—Ç–æ–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
def handle_parsing_error(error) -> str:
    return f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {error}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –æ—Ç–≤–µ—Ç."


# –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
agent = initialize_agent(
    tools=tools,
    llm=llm,
    agent=AgentType.STRUCTURED_CHAT_ZERO_SHOT_REACT_DESCRIPTION,
    verbose=True,
    max_iterations=3,
    handle_parsing_errors=handle_parsing_error,
    return_intermediate_steps=True,
)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è Python-–∫–æ–¥–∞
def extract_python_code(text: str) -> str:
    if not text:
        return ""

    if "```python" in text:
        start = text.find("```python") + 9
        end = text.find("```", start)
        return text[start:end].strip()

    if "```" in text:
        start = text.find("```") + 3
        end = text.find("```", start)
        return text[start:end].strip()

    return text


# –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞
def run_agent_with_retry(question: str, max_attempts: int = 3):
    for attempt in range(1, max_attempts + 1):
        print(f"\n=== –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts} ===")
        print(f"–ó–∞–ø—Ä–æ—Å: {question}")

        try:
            start = time.time()
            response = agent.invoke({"input": question})
            elapsed = time.time() - start

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–≤–æ–¥ –∏–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —à–∞–≥–æ–≤
            output = ""
            if "intermediate_steps" in response:
                for step in response["intermediate_steps"]:
                    if isinstance(step, tuple) and len(step) >= 2:
                        action, observation = step[:2]
                        if isinstance(action, dict) and "tool_input" in action:
                            output += f"\n–î–µ–π—Å—Ç–≤–∏–µ: {action['tool']}\n–í–≤–æ–¥: {action['tool_input']}\n"
                        if observation:
                            output += f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {observation}\n"

            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            if "output" in response:
                output += f"\n–§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {response['output']}"

            print(f"\n–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed:.2f} —Å–µ–∫")
            print("\n=== –ü–æ–ª–Ω—ã–π –≤—ã–≤–æ–¥ –∞–≥–µ–Ω—Ç–∞ ===")
            print(output)

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥
            code = ""
            if "intermediate_steps" in response:
                for step in response["intermediate_steps"]:
                    if isinstance(step, tuple) and len(step) >= 1:
                        action = step[0]
                        if isinstance(action, dict) and "tool_input" in action:
                            code_candidate = extract_python_code(
                                str(action["tool_input"])
                            )
                            if code_candidate:
                                code = code_candidate
                                break

            if code:
                print("\n=== –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ ===")
                print(code)
            else:
                print("\n[INFO] –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤—ã–≤–æ–¥–µ –∞–≥–µ–Ω—Ç–∞")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if "120" in output or "—Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª" in output.lower():
                print("\n‚úÖ –ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ –∏ –ø—Ä–æ—à–µ–ª —Ç–µ—Å—Ç")
                return output
            else:
                raise ValueError("–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è")

        except Exception as e:
            print(f"\n‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
            if attempt < max_attempts:
                print("üîÑ –ü–æ–ø—ã—Ç–∫–∞ —Å–∞–º–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏–∏...")
                question = f"–ò—Å–ø—Ä–∞–≤—å –∫–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—à–∏–±–∫–∏: {str(e)}"
            else:
                print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å–ª–µ —Ç—Ä–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
                return None


# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    result = run_agent_with_retry(
        "–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ Python, –∫–æ—Ç–æ—Ä–∞—è –≤—ã—á–∏—Å–ª—è–µ—Ç —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞ n –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π –µ—ë –¥–ª—è n=5. \n –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π Python-–∫–æ–¥ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π"
    )

    if result:
        print("\n" + "=" * 50)
        print("–§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(result)
    else:
        print("\n–ó–∞–¥–∞—á–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫")
