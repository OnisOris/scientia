import os
import time

from dotenv import load_dotenv
from langchain.agents import AgentType, initialize_agent
from langchain_experimental.tools.python.tool import PythonREPLTool

# –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ LangChain
from langchain_openai import ChatOpenAI

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM
llm = ChatOpenAI(temperature=0, model="gpt-3.5-turbo", api_key=OPENAI_API_KEY)

# –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è Python-–∫–æ–¥–∞
python_tool = PythonREPLTool()
tools = [python_tool]

# –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ —Å —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π
agent = initialize_agent(
    tools=tools,
    llm=llm,
    agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,
    verbose=True,
)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è Python-–∫–æ–¥–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
def extract_python_code(text: str) -> str:
    if "```python" in text:
        start = text.find("```python") + len("```python")
        end = text.find("```", start)
        return text[start:end].strip()
    return ""


# –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —Å–∞–º–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏–µ–π
def run_agent_with_retry(question: str, max_attempts: int = 3):
    for attempt in range(1, max_attempts + 1):
        print(f"\n=== –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts} ===")
        print(f"–ó–∞–ø—Ä–æ—Å: {question}\n")
        try:
            start = time.time()
            response = agent.run(question)
            elapsed = time.time() - start

            print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed:.2f} —Å–µ–∫")
            print("\n=== –û—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞ ===")
            print(response)

            code = extract_python_code(response)
            if code:
                print("\n=== –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ ===")
                print(code)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if (
                any(val in response for val in ["120", "3628800"])
                or "—Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª" in response.lower()
            ):
                print("\n‚úÖ –ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ –∏ –ø—Ä–æ—à–µ–ª —Ç–µ—Å—Ç")
                return
            else:
                raise ValueError("–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è")
        except Exception as e:
            print(f"\n‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
            if attempt < max_attempts:
                print("üîÑ –ü–æ–ø—ã—Ç–∫–∞ —Å–∞–º–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏–∏...")
                question = (
                    f"–ò—Å–ø—Ä–∞–≤—å –∫–æ–¥, —á—Ç–æ–±—ã –æ–Ω –ø—Ä–æ—à–µ–ª —Ç–µ—Å—Ç –Ω–∞ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª: {e}"
                )
            else:
                print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å–ª–µ —Ç—Ä–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")


# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    run_agent_with_retry(
        "–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ Python, –∫–æ—Ç–æ—Ä–∞—è –≤—ã—á–∏—Å–ª—è–µ—Ç —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞ n –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π –µ—ë –¥–ª—è n=5."
    )
