import logging
import os
import uuid

import httpx

# import spacy
from aiogram import BaseMiddleware, Bot, Dispatcher, F, types
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.filters import Command
from aiogram.types import (
    CallbackQuery,
    Message,
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    BotCommand,
)

# from dotenv import load_dotenv
from fastapi import HTTPException
from sqlalchemy.orm import Mapped

from app.db import Session
from app.models.users import User
from app.repositories.user_repository import UserRepository

# from app.repositories.domain_repository import DomainRepository
from app.repositories.registration_request_repository import (
    RegistrationRequestRepository,
)

# from app.repositories.concept_repository import ConceptRepository
from app.repositories.profile_repository import ProfileRepository

# from app.services.email import send_confirmation_email
# from app.services.prompt_generator import PromptService
# from app.services.text_processor import TextProcessorService
from app.models.registration_requests import RegistrationRequest
from app.models.user_profile import UserProfile

from app.settings import settings

logger = logging.getLogger(__name__)

os.environ["GRPC_DNS_RESOLVER"] = settings.GRPC_DNS_RESOLVER
ADMIN_IDS = settings.ADMIN_IDS

session = AiohttpSession()
bot = Bot(
    token=settings.TG_BOT_TOKEN,
    default=DefaultBotProperties(parse_mode="HTML"),
    session=session,
)
dp = Dispatcher()


class AuthMiddleware(BaseMiddleware):
    async def __call__(self, handler, event: Update, data):
        if isinstance(event, Message) and event.text:
            if event.text.startswith("/register") or event.text.startswith(
                "/admin"
            ):
                return await handler(event, data)

        if isinstance(event, Message):
            user_id = event.from_user.id if event.from_user else None
        elif isinstance(event, CallbackQuery):
            user_id = event.from_user.id if event.from_user else None
        else:
            return await handler(event, data)

        if not user_id:
            await event.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return

        async with Session() as session:
            user_repo = UserRepository(session)
            user = await user_repo.get_by_telegram_id(user_id)

            if not user or not user.confirmed:
                if isinstance(event, (Message, CallbackQuery)):
                    await event.answer(
                        "‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"
                    )
                return

            data["user"] = user
            return await handler(event, data)


@dp.message(Command("sync"))
async def cmd_sync(message: Message):
    await message.answer("–ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é‚Ä¶")
    async with httpx.AsyncClient() as client:
        resp = await client.post(f"{settings.API_URL}/sync")
    await message.answer(resp.json().get("detail", "–ì–æ—Ç–æ–≤–æ"))


@dp.message(Command("quiz"))
async def cmd_quiz(message: Message):
    await message.answer("cmd_quiz() –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")


@dp.message(Command("admin"))
async def cmd_admin(message: Message):
    if message.from_user.id not in settings.ADMIN_IDS:
        return

    text = (
        "üëÆ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:\n\n"
        "–ß—Ç–æ–±—ã –≤—ã–¥–∞—Ç—å –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø:\n"
        "`/grant_premium <user_id>`\n\n"
        "–ß—Ç–æ–±—ã –æ—Ç–æ–∑–≤–∞—Ç—å –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø:\n"
        "`/revoke_premium <user_id>`\n\n"
        "–ì–¥–µ `user_id`: –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ, UUID"
    )

    await message.answer(text, parse_mode="MarkdownV2")


@dp.message(Command("grant_premium"))
async def cmd_grant_premium(message: Message):
    if message.from_user.id not in settings.ADMIN_IDS:
        return
    try:
        args = message.text.split()
        if len(args) < 2:
            await message.answer("–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return

        user_id = uuid.UUID(args[1])
    except (ValueError, IndexError):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    async with httpx.AsyncClient() as client:
        try:
            resp = await client.post(
                f"{settings.API_URL}/admin/grant-premium",
                json={"user_id": str(user_id)},
            )
            resp.raise_for_status()
            await message.answer(resp.json().get("detail"))
        except httpx.HTTPStatusError as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e.response.text}")


@dp.message(Command("register"))
async def cmd_register(message: Message):
    """
    –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    """
    if message.from_user.id in settings.ADMIN_IDS:
        async with Session() as session:
            user_repo = UserRepository(session)
            existing_user = await user_repo.get_by_telegram_id(
                message.from_user.id
            )
            if existing_user:
                await message.answer(
                    "‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!"
                )
                return
            user = await user_repo.add(
                User(
                    telegram_id=message.from_user.id,
                    hashed_password="default",
                    confirmed=True,
                    is_premium=True,
                )
            )
            profile_repo = ProfileRepository(session)
            await profile_repo.add(
                UserProfile(
                    user_id=user.id,
                    username=message.from_user.username
                    or f"admin_{message.from_user.id}",
                    first_name=message.from_user.first_name,
                    last_name=message.from_user.last_name,
                )
            )
            await session.commit()
        await message.answer(
            "üéâ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º."
        )
        return
    async with Session() as session:
        request_repo = RegistrationRequestRepository(session)
        existing_request = await request_repo.get_by_telegram_id(
            message.from_user.id
        )
        if existing_request:
            status_msg = {
                "pending": "‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
                "approved": "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –æ–¥–æ–±—Ä–µ–Ω–∞",
                "rejected": "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
            }
            await message.answer(status_msg[existing_request.status])
            return
        new_request = RegistrationRequest(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name,
        )
        await request_repo.add(new_request)
        sent_to_admins = False
        for admin_id in settings.ADMIN_IDS:
            try:
                await bot.send_message(
                    admin_id,
                    f"üì® –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name}\n"
                    f"üÜî ID: {message.from_user.id}\n"
                    f"üë§ Username: @{message.from_user.username}",
                    reply_markup=InlineKeyboardMarkup(
                        inline_keyboard=[
                            [
                                InlineKeyboardButton(
                                    text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å",
                                    callback_data=f"approve_{message.from_user.id}",
                                ),
                                InlineKeyboardButton(
                                    text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                                    callback_data=f"reject_{message.from_user.id}",
                                ),
                            ]
                        ]
                    ),
                )
                sent_to_admins = True
            except Exception as e:
                logger.error(f"Failed to send to admin {admin_id}: {str(e)}")

        if sent_to_admins:
            await message.answer(
                "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. "
                "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –æ–Ω–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞."
            )
        else:
            logger.critical(
                f"Failed to send registration request to any admin!"
            )
            await message.answer(
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
            )


@dp.callback_query(F.data.startswith("approve_"))
async def approve_registration(callback: CallbackQuery):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    """
    telegram_id = int(callback.data.split("_")[1])
    async with Session() as session:
        user_repo = UserRepository(session)
        existing_user = await user_repo.get_by_telegram_id(telegram_id)
        if existing_user:
            await callback.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
            await callback.message.edit_text(
                f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {telegram_id} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω",
                reply_markup=None,
            )
            return
        request_repo = RegistrationRequestRepository(session)
        request = await request_repo.get_by_telegram_id(telegram_id)
        if not request:
            await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        request.status = "approved"
        user = await user_repo.add(
            User(
                telegram_id=telegram_id,
                hashed_password="default",
                confirmed=True,
            )
        )
        profile_repo = ProfileRepository(session)
        await profile_repo.add(
            UserProfile(
                user_id=user.id,
                username=request.username or f"user_{telegram_id}",
                first_name=request.first_name,
                last_name=request.last_name,
            )
        )
        await session.commit()
        try:
            await bot.send_message(
                telegram_id,
                "üéâ –í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.",
            )
        except Exception as e:
            logger.error(
                f"Failed to send message to user {telegram_id}: {str(e)}"
            )
        await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        await callback.message.edit_text(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{request.username} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω",
            reply_markup=None,
        )


@dp.callback_query(F.data.startswith("reject_"))
async def reject_registration(callback: CallbackQuery):
    """
    –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    """
    telegram_id = int(callback.data.split("_")[1])
    async with Session() as session:
        request_repo = RegistrationRequestRepository(session)
        request = await request_repo.get_by_telegram_id(telegram_id)
        request.status = "rejected"
        await session.commit()
        try:
            await bot.send_message(
                telegram_id,
                "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            )
        except Exception:
            pass
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
        await callback.message.edit_text(
            f"‚ùå –ó–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{request.username} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
            reply_markup=None,
        )


@dp.message(Command("help"))
async def cmd_help(message: Message):
    text = (
        "üìö –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n"
        "‚Ä¢ /start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º\n"
        "‚Ä¢ /register - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ\n"
        "‚Ä¢ /add [—Ç–µ–∫—Å—Ç] - –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n"
        "‚Ä¢ /quiz - –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è\n"
        "‚Ä¢ /deepseek - –ê–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö –∑–Ω–∞–Ω–∏–π\n"
        "‚Ä¢ /admin - –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)\n\n"
        "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–Ω–µ —Ç–µ–∫—Å—Ç—ã - —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ–∫—É –∏–∑ –Ω–∏—Ö –∫–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ç—ã!"
    )
    await message.answer(text)


@dp.message(Command("start"))
async def cmd_start(message: Message):
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(
            text="–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="add_text"
        ),
        types.InlineKeyboardButton(
            text="–ê–Ω–∞–ª–∏–∑ –∑–Ω–∞–Ω–∏–π", callback_data="analysis"
        ),
    )
    builder.adjust(1)

    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Scientia! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup(),
    )


@dp.message(F.text.contains("::"))
async def process_concept_definition(message: Message):
    try:
        parts = message.text.split("::", 1)
        concept_name = parts[0].strip()
        definition = parts[1].strip()

        await message.answer(
            f"concept_name - {concept_name} \ndefinition - {definition}"
        )
    except Exception as e:
        logger.error(f"Error updating concept: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@dp.callback_query(F.data == "add_text")
async def process_add_text(callback: CallbackQuery):
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add [—Ç–µ–∫—Å—Ç]"
    )
    await callback.answer()


@dp.callback_query(F.data == "quiz")
async def process_quiz(callback: CallbackQuery):
    await cmd_quiz(callback.message)
    await callback.answer()


@dp.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç")
async def handle_add_text(message: Message):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add [—Ç–µ–∫—Å—Ç]"
    )


@dp.message(F.text == "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏")
async def handle_quiz(message: Message):
    await message.answer("–ü–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ")


def start_bot():
    import asyncio

    async def set_bot_commands():
        commands = [
            types.BotCommand(command="/start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
            types.BotCommand(
                command="/help", description="–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"
            ),
            types.BotCommand(command="/add", description="–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç"),
            types.BotCommand(
                command="/quiz", description="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏"
            ),
            types.BotCommand(command="/map", description="–ö–∞—Ä—Ç–∞ –∑–Ω–∞–Ω–∏–π"),
            types.BotCommand(
                command="/stats", description="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–Ω–∞–Ω–∏–π"
            ),
            types.BotCommand(command="/deepseek", description="–ê–Ω–∞–ª–∏–∑ –∑–Ω–∞–Ω–∏–π"),
            types.BotCommand(command="/register", description="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"),
        ]

        admin_commands = [
            types.BotCommand(command="/admin", description="–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"),
            types.BotCommand(
                command="/sync", description="–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö"
            ),
        ]
        await bot.set_my_commands(commands)
        for admin_id in settings.ADMIN_IDS:
            try:
                await bot.set_my_commands(
                    commands + admin_commands,
                    scope=types.BotCommandScopeChat(chat_id=admin_id),
                )
            except Exception as e:
                logger.error(
                    f"Failed to set commands for admin {admin_id}: {str(e)}"
                )

    @dp.message(Command("help"))
    async def cmd_help(message: Message):
        text = (
            "üìö <b>–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º</b>:\n\n"
            "‚Ä¢ /start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º\n"
            "‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "‚Ä¢ /add [—Ç–µ–∫—Å—Ç] - –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n"
            "‚Ä¢ /quiz - –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è\n"
            "‚Ä¢ /map - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à—É –∫–∞—Ä—Ç—É –∑–Ω–∞–Ω–∏–π\n"
            "‚Ä¢ /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–∏—Ö –∑–Ω–∞–Ω–∏–π\n"
            "‚Ä¢ /deepseek - –ê–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö –∑–Ω–∞–Ω–∏–π AI\n"
            "‚Ä¢ /register - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ\n\n"
            "<b>–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤</b>:\n"
            "‚Ä¢ /admin - –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n"
            "‚Ä¢ /sync - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö\n\n"
            "üí° –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–Ω–µ —Ç–µ–∫—Å—Ç—ã - "
            "—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ–∫—É –∏–∑ –Ω–∏—Ö –∫–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ç—ã!\n"
            "üí° –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: <code>–ö–æ–Ω—Ü–µ–ø—Ç :: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ</code>"
        )
        await message.answer(text, parse_mode="HTML")

    async def main():
        await set_bot_commands()
        await dp.start_polling(bot)

    asyncio.run(main())
